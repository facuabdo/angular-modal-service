{"ast":null,"code":"// modal.service.ts\nimport { Injector, inject } from \"@angular/core\";\nimport { DialogRef } from \"./dialog-ref\";\nimport * as i0 from \"@angular/core\";\nexport class DialogService {\n  constructor() {\n    this.dialogRefs = {};\n    this.injector = inject(Injector);\n    this.viewContainerRef = undefined;\n  }\n  init(vcr) {\n    this.viewContainerRef = vcr;\n  }\n  open(component) {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n    const componentRef = this.viewContainerRef?.createComponent(component, {\n      injector: this.injector\n    });\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = componentRef;\n    const dialogRef = new DialogRef(componentRef.instance, componentRef);\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n    return dialogRef;\n  }\n  removeDialog(refIdentifier) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n  static #_ = this.ɵfac = function DialogService_Factory(t) {\n    return new (t || DialogService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DialogService,\n    factory: DialogService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["Injector","inject","DialogRef","DialogService","constructor","dialogRefs","injector","viewContainerRef","undefined","init","vcr","open","component","componentRef","createComponent","refIdentifier","crypto","randomUUID","dialogRef","instance","closed","subscribe","removeDialog","destroy","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/facundo.abdo/Develop/angular-modal-service/src/app/dialog-service/dialog.service.ts"],"sourcesContent":["// modal.service.ts\n\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Type,\n  ViewContainerRef,\n  inject,\n} from \"@angular/core\";\n\nimport { DialogRef } from \"./dialog-ref\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogService {\n  private dialogRefs: { [key: string]: ComponentRef<any> } = {};\n  private injector = inject(Injector);\n  private viewContainerRef: ViewContainerRef | undefined = undefined;\n\n  constructor() {}\n\n  init(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  open<T>(component: Type<T>): any {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n\n    const componentRef = this.viewContainerRef?.createComponent(component, {\n      injector: this.injector,\n    });\n\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = componentRef;\n\n    const dialogRef = new DialogRef(componentRef.instance, componentRef);\n\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n\n    return dialogRef;\n  }\n\n  removeDialog(refIdentifier: string) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n}\n"],"mappings":"AAAA;AAEA,SAGEA,QAAQ,EAGRC,MAAM,QACD,eAAe;AAEtB,SAASC,SAAS,QAAQ,cAAc;;AAKxC,OAAM,MAAOC,aAAa;EAKxBC,YAAA;IAJQ,KAAAC,UAAU,GAAyC,EAAE;IACrD,KAAAC,QAAQ,GAAGL,MAAM,CAACD,QAAQ,CAAC;IAC3B,KAAAO,gBAAgB,GAAiCC,SAAS;EAEnD;EAEfC,IAAIA,CAACC,GAAqB;IACxB,IAAI,CAACH,gBAAgB,GAAGG,GAAG;EAC7B;EAEAC,IAAIA,CAAIC,SAAkB;IACxB,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAE;MAC1B,MAAM,qCAAqC;;IAG7C,MAAMM,YAAY,GAAG,IAAI,CAACN,gBAAgB,EAAEO,eAAe,CAACF,SAAS,EAAE;MACrEN,QAAQ,EAAE,IAAI,CAACA;KAChB,CAAC;IAEF,MAAMS,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;IACzC,IAAI,CAACZ,UAAU,CAACU,aAAa,CAAC,GAAGF,YAAY;IAE7C,MAAMK,SAAS,GAAG,IAAIhB,SAAS,CAACW,YAAY,CAACM,QAAQ,EAAEN,YAAY,CAAC;IAEpEK,SAAS,CAACE,MAAM,CAACC,SAAS,CAAC,MAAK;MAC9B,IAAI,CAACC,YAAY,CAACP,aAAa,CAAC;IAClC,CAAC,CAAC;IAEF,OAAOG,SAAS;EAClB;EAEAI,YAAYA,CAACP,aAAqB;IAChC,IAAI,CAACV,UAAU,CAACU,aAAa,CAAC,CAACQ,OAAO,EAAE;EAC1C;EAAC,QAAAC,CAAA,G;qBAlCUrB,aAAa;EAAA;EAAA,QAAAsB,EAAA,G;WAAbtB,aAAa;IAAAuB,OAAA,EAAbvB,aAAa,CAAAwB,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}