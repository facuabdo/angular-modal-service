{"ast":null,"code":"// modal.service.ts\nimport { Injector, inject } from \"@angular/core\";\nimport { DialogRef } from \"./dialog-ref\";\nimport { ModalComponent } from \"./modal/modal.component\";\nimport * as i0 from \"@angular/core\";\nexport class DialogService {\n  constructor() {\n    this.dialogRefs = {};\n    this.injector = inject(Injector);\n    this.viewContainerRef = undefined;\n  }\n  init(vcr) {\n    this.viewContainerRef = vcr;\n  }\n  open(component) {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n    const dialogRef = new DialogRef();\n    const providers = [{\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n    const componentRef = this.viewContainerRef?.createComponent(ModalComponent, {\n      injector: Injector.create({\n        providers,\n        parent: this.injector\n      })\n    });\n    dialogRef.componentRef = componentRef;\n    dialogRef.componentInstance = componentRef.instance;\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = componentRef;\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n    return dialogRef;\n  }\n  removeDialog(refIdentifier) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n  static #_ = this.ɵfac = function DialogService_Factory(t) {\n    return new (t || DialogService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DialogService,\n    factory: DialogService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["Injector","inject","DialogRef","ModalComponent","DialogService","constructor","dialogRefs","injector","viewContainerRef","undefined","init","vcr","open","component","dialogRef","providers","provide","useValue","componentRef","createComponent","create","parent","componentInstance","instance","refIdentifier","crypto","randomUUID","closed","subscribe","removeDialog","destroy","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/facundo.abdo/Develop/angular-modal-service/src/app/dialog/dialog.service.ts"],"sourcesContent":["// modal.service.ts\n\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  StaticProvider,\n  Type,\n  ViewContainerRef,\n  inject,\n} from \"@angular/core\";\n\nimport { DialogRef } from \"./dialog-ref\";\nimport { ModalComponent } from \"./modal/modal.component\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogService {\n  private dialogRefs: { [key: string]: ComponentRef<any> } = {};\n  private injector = inject(Injector);\n  private viewContainerRef: ViewContainerRef | undefined = undefined;\n\n  constructor() {}\n\n  init(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  open<T>(component: Type<T>): any {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n\n    const dialogRef = new DialogRef();\n\n    const providers: StaticProvider[] = [\n      { provide: DialogRef, useValue: dialogRef },\n    ];\n\n    const componentRef = this.viewContainerRef?.createComponent(\n      ModalComponent,\n      {\n        injector: Injector.create({\n          providers,\n          parent: this.injector,\n        }),\n      }\n    );\n\n    (dialogRef as { componentRef: ComponentRef<T> }).componentRef =\n      componentRef;\n    (dialogRef as { componentInstance: T }).componentInstance =\n      componentRef.instance;\n\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = componentRef;\n\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n\n    return dialogRef;\n  }\n\n  removeDialog(refIdentifier: string) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n}\n"],"mappings":"AAAA;AAEA,SAGEA,QAAQ,EAIRC,MAAM,QACD,eAAe;AAEtB,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,cAAc,QAAQ,yBAAyB;;AAKxD,OAAM,MAAOC,aAAa;EAKxBC,YAAA;IAJQ,KAAAC,UAAU,GAAyC,EAAE;IACrD,KAAAC,QAAQ,GAAGN,MAAM,CAACD,QAAQ,CAAC;IAC3B,KAAAQ,gBAAgB,GAAiCC,SAAS;EAEnD;EAEfC,IAAIA,CAACC,GAAqB;IACxB,IAAI,CAACH,gBAAgB,GAAGG,GAAG;EAC7B;EAEAC,IAAIA,CAAIC,SAAkB;IACxB,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAE;MAC1B,MAAM,qCAAqC;;IAG7C,MAAMM,SAAS,GAAG,IAAIZ,SAAS,EAAE;IAEjC,MAAMa,SAAS,GAAqB,CAClC;MAAEC,OAAO,EAAEd,SAAS;MAAEe,QAAQ,EAAEH;IAAS,CAAE,CAC5C;IAED,MAAMI,YAAY,GAAG,IAAI,CAACV,gBAAgB,EAAEW,eAAe,CACzDhB,cAAc,EACd;MACEI,QAAQ,EAAEP,QAAQ,CAACoB,MAAM,CAAC;QACxBL,SAAS;QACTM,MAAM,EAAE,IAAI,CAACd;OACd;KACF,CACF;IAEAO,SAA+C,CAACI,YAAY,GAC3DA,YAAY;IACbJ,SAAsC,CAACQ,iBAAiB,GACvDJ,YAAY,CAACK,QAAQ;IAEvB,MAAMC,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;IACzC,IAAI,CAACpB,UAAU,CAACkB,aAAa,CAAC,GAAGN,YAAY;IAE7CJ,SAAS,CAACa,MAAM,CAACC,SAAS,CAAC,MAAK;MAC9B,IAAI,CAACC,YAAY,CAACL,aAAa,CAAC;IAClC,CAAC,CAAC;IAEF,OAAOV,SAAS;EAClB;EAEAe,YAAYA,CAACL,aAAqB;IAChC,IAAI,CAAClB,UAAU,CAACkB,aAAa,CAAC,CAACM,OAAO,EAAE;EAC1C;EAAC,QAAAC,CAAA,G;qBAjDU3B,aAAa;EAAA;EAAA,QAAA4B,EAAA,G;WAAb5B,aAAa;IAAA6B,OAAA,EAAb7B,aAAa,CAAA8B,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}