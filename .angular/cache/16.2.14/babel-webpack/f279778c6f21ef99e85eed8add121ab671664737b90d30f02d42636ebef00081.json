{"ast":null,"code":"// modal.service.ts\nimport { Injector, inject } from \"@angular/core\";\nimport { APP_ROOT_VIEW_CONTAINER_REF } from \"./app.tokens\";\nimport * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.modalRefs = {};\n    this.injector = inject(Injector);\n  }\n  init(vcr) {\n    this.viewContainerRef = vcr;\n  }\n  open(component) {\n    this.close();\n    const componentRef = this.viewContainerRef.createComponent(component, {\n      injector: this.injector\n    });\n    this.modalRefs[crypto.randomUUID()] = componentRef;\n    return componentRef;\n  }\n  close() {\n    if (this.modalRefs) {\n      // this.modalRefs.destroy();\n    }\n  }\n  static #_ = this.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: function ModalService_Factory(t) {\n      let r = null;\n      if (t) {\n        r = new (t || ModalService)();\n      } else {\n        r = i0.ɵɵinject(APP_ROOT_VIEW_CONTAINER_REF);\n      }\n      return r;\n    },\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["Injector","inject","APP_ROOT_VIEW_CONTAINER_REF","ModalService","constructor","modalRefs","injector","init","vcr","viewContainerRef","open","component","close","componentRef","createComponent","crypto","randomUUID","_","_2","factory","ModalService_Factory","t","r"],"sources":["/Users/facundo.abdo/Develop/angular-modal-service/src/app/modal.service.ts"],"sourcesContent":["// modal.service.ts\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  Type,\n  ViewContainerRef,\n  inject,\n} from \"@angular/core\";\n\nimport { APP_ROOT_VIEW_CONTAINER_REF } from \"./app.tokens\";\n\n@Injectable({\n  providedIn: \"root\",\n  useExisting: APP_ROOT_VIEW_CONTAINER_REF,\n})\nexport class ModalService {\n  private modalRefs: { [key: string]: ComponentRef<any> } = {};\n  private injector = inject(Injector);\n  private viewContainerRef: ViewContainerRef;\n\n  constructor() {}\n\n  init(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  open<T>(component: Type<T>): ComponentRef<T> {\n    this.close();\n\n    const componentRef = this.viewContainerRef.createComponent(component, {\n      injector: this.injector,\n    });\n\n    this.modalRefs[crypto.randomUUID()] = componentRef;\n\n    return componentRef;\n  }\n\n  close() {\n    if (this.modalRefs) {\n      // this.modalRefs.destroy();\n    }\n  }\n}\n"],"mappings":"AAAA;AAEA,SAKEA,QAAQ,EAGRC,MAAM,QACD,eAAe;AAEtB,SAASC,2BAA2B,QAAQ,cAAc;;AAM1D,OAAM,MAAOC,YAAY;EAKvBC,YAAA;IAJQ,KAAAC,SAAS,GAAyC,EAAE;IACpD,KAAAC,QAAQ,GAAGL,MAAM,CAACD,QAAQ,CAAC;EAGpB;EAEfO,IAAIA,CAACC,GAAqB;IACxB,IAAI,CAACC,gBAAgB,GAAGD,GAAG;EAC7B;EAEAE,IAAIA,CAAIC,SAAkB;IACxB,IAAI,CAACC,KAAK,EAAE;IAEZ,MAAMC,YAAY,GAAG,IAAI,CAACJ,gBAAgB,CAACK,eAAe,CAACH,SAAS,EAAE;MACpEL,QAAQ,EAAE,IAAI,CAACA;KAChB,CAAC;IAEF,IAAI,CAACD,SAAS,CAACU,MAAM,CAACC,UAAU,EAAE,CAAC,GAAGH,YAAY;IAElD,OAAOA,YAAY;EACrB;EAEAD,KAAKA,CAAA;IACH,IAAI,IAAI,CAACP,SAAS,EAAE;MAClB;IAAA;EAEJ;EAAC,QAAAY,CAAA,G;qBA3BUd,YAAY;EAAA;EAAA,QAAAe,EAAA,G;WAAZf,YAAY;IAAAgB,OAAA,WAAAC,qBAAAC,CAAA;MAAA,IAAAC,CAAA;MAAA,IAAAD,CAAA;sBAAZlB,YAAY;;wBAFVD,2BAA2B;;;;gBAD5B;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}