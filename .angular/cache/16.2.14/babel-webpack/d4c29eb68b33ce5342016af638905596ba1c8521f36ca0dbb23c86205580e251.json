{"ast":null,"code":"// modal.service.ts\nimport { EnvironmentInjector, Injector, ViewContainerRef, inject } from \"@angular/core\";\nimport { DialogRef } from \"./dialog-ref\";\nimport { ModalComponent } from \"./modal/modal.component\";\nimport * as i0 from \"@angular/core\";\nexport class DialogService {\n  constructor() {\n    this.dialogRefs = {};\n    this.injector = inject(Injector);\n    this.environmentInjector = inject(EnvironmentInjector);\n    this.viewContainerRef = undefined;\n  }\n  init(vcr) {\n    this.viewContainerRef = vcr;\n  }\n  open(content) {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n    const dialogRef = new DialogRef();\n    const providers = [{\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n    const injector = Injector.create({\n      providers,\n      parent: this.injector\n    });\n    const contentRef = this.viewContainerRef?.createEmbeddedView(content, undefined, {\n      injector\n    });\n    const modalRef = this.viewContainerRef?.createComponent(ModalComponent, {\n      environmentInjector: this.environmentInjector,\n      injector,\n      projectableNodes: [contentRef.rootNodes]\n    });\n    console.log(\"injected vcr\", this.viewContainerRef);\n    console.log(\"created modal vcr\", modalRef.injector.get(ViewContainerRef));\n    dialogRef.componentRef = modalRef;\n    dialogRef.componentInstance = modalRef.instance;\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = modalRef;\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n    return dialogRef;\n  }\n  removeDialog(refIdentifier) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n  static #_ = this.ɵfac = function DialogService_Factory(t) {\n    return new (t || DialogService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DialogService,\n    factory: DialogService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["EnvironmentInjector","Injector","ViewContainerRef","inject","DialogRef","ModalComponent","DialogService","constructor","dialogRefs","injector","environmentInjector","viewContainerRef","undefined","init","vcr","open","content","dialogRef","providers","provide","useValue","create","parent","contentRef","createEmbeddedView","modalRef","createComponent","projectableNodes","rootNodes","console","log","get","componentRef","componentInstance","instance","refIdentifier","crypto","randomUUID","closed","subscribe","removeDialog","destroy","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/facundo.abdo/Develop/angular-modal-service/src/app/dialog/dialog.service.ts"],"sourcesContent":["// modal.service.ts\n\nimport {\n  ComponentRef,\n  EnvironmentInjector,\n  Injectable,\n  Injector,\n  StaticProvider,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n  createComponent,\n  inject,\n} from \"@angular/core\";\n\nimport { DialogRef } from \"./dialog-ref\";\nimport { ModalComponent } from \"./modal/modal.component\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogService {\n  private dialogRefs: { [key: string]: ComponentRef<any> } = {};\n  private injector = inject(Injector);\n  private environmentInjector = inject(EnvironmentInjector);\n  private viewContainerRef: ViewContainerRef | undefined = undefined;\n\n  constructor() {}\n\n  init(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  open<T>(content: TemplateRef<T>): any {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n\n    const dialogRef = new DialogRef();\n\n    const providers: StaticProvider[] = [\n      { provide: DialogRef, useValue: dialogRef },\n    ];\n\n    const injector = Injector.create({\n      providers,\n      parent: this.injector,\n    });\n\n    const contentRef = this.viewContainerRef?.createEmbeddedView(\n      content,\n      undefined,\n      {\n        injector,\n      }\n    );\n\n    const modalRef = this.viewContainerRef?.createComponent(ModalComponent, {\n      environmentInjector: this.environmentInjector,\n      injector,\n      projectableNodes: [contentRef.rootNodes],\n    });\n\n    console.log(\"injected vcr\", this.viewContainerRef);\n    console.log(\"created modal vcr\", modalRef.injector.get(ViewContainerRef));\n\n    (dialogRef as { componentRef: ComponentRef<ModalComponent> }).componentRef =\n      modalRef;\n    (dialogRef as { componentInstance: ModalComponent }).componentInstance =\n      modalRef.instance;\n\n    const refIdentifier = crypto.randomUUID();\n    this.dialogRefs[refIdentifier] = modalRef;\n\n    dialogRef.closed.subscribe(() => {\n      this.removeDialog(refIdentifier);\n    });\n\n    return dialogRef;\n  }\n\n  removeDialog(refIdentifier: string) {\n    this.dialogRefs[refIdentifier].destroy();\n  }\n}\n"],"mappings":"AAAA;AAEA,SAEEA,mBAAmB,EAEnBC,QAAQ,EAIRC,gBAAgB,EAEhBC,MAAM,QACD,eAAe;AAEtB,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,cAAc,QAAQ,yBAAyB;;AAKxD,OAAM,MAAOC,aAAa;EAMxBC,YAAA;IALQ,KAAAC,UAAU,GAAyC,EAAE;IACrD,KAAAC,QAAQ,GAAGN,MAAM,CAACF,QAAQ,CAAC;IAC3B,KAAAS,mBAAmB,GAAGP,MAAM,CAACH,mBAAmB,CAAC;IACjD,KAAAW,gBAAgB,GAAiCC,SAAS;EAEnD;EAEfC,IAAIA,CAACC,GAAqB;IACxB,IAAI,CAACH,gBAAgB,GAAGG,GAAG;EAC7B;EAEAC,IAAIA,CAAIC,OAAuB;IAC7B,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAE;MAC1B,MAAM,qCAAqC;;IAG7C,MAAMM,SAAS,GAAG,IAAIb,SAAS,EAAE;IAEjC,MAAMc,SAAS,GAAqB,CAClC;MAAEC,OAAO,EAAEf,SAAS;MAAEgB,QAAQ,EAAEH;IAAS,CAAE,CAC5C;IAED,MAAMR,QAAQ,GAAGR,QAAQ,CAACoB,MAAM,CAAC;MAC/BH,SAAS;MACTI,MAAM,EAAE,IAAI,CAACb;KACd,CAAC;IAEF,MAAMc,UAAU,GAAG,IAAI,CAACZ,gBAAgB,EAAEa,kBAAkB,CAC1DR,OAAO,EACPJ,SAAS,EACT;MACEH;KACD,CACF;IAED,MAAMgB,QAAQ,GAAG,IAAI,CAACd,gBAAgB,EAAEe,eAAe,CAACrB,cAAc,EAAE;MACtEK,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;MAC7CD,QAAQ;MACRkB,gBAAgB,EAAE,CAACJ,UAAU,CAACK,SAAS;KACxC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACnB,gBAAgB,CAAC;IAClDkB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,QAAQ,CAAChB,QAAQ,CAACsB,GAAG,CAAC7B,gBAAgB,CAAC,CAAC;IAExEe,SAA4D,CAACe,YAAY,GACxEP,QAAQ;IACTR,SAAmD,CAACgB,iBAAiB,GACpER,QAAQ,CAACS,QAAQ;IAEnB,MAAMC,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;IACzC,IAAI,CAAC7B,UAAU,CAAC2B,aAAa,CAAC,GAAGV,QAAQ;IAEzCR,SAAS,CAACqB,MAAM,CAACC,SAAS,CAAC,MAAK;MAC9B,IAAI,CAACC,YAAY,CAACL,aAAa,CAAC;IAClC,CAAC,CAAC;IAEF,OAAOlB,SAAS;EAClB;EAEAuB,YAAYA,CAACL,aAAqB;IAChC,IAAI,CAAC3B,UAAU,CAAC2B,aAAa,CAAC,CAACM,OAAO,EAAE;EAC1C;EAAC,QAAAC,CAAA,G;qBA9DUpC,aAAa;EAAA;EAAA,QAAAqC,EAAA,G;WAAbrC,aAAa;IAAAsC,OAAA,EAAbtC,aAAa,CAAAuC,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}