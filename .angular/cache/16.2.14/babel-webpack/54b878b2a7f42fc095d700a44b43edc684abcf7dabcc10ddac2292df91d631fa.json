{"ast":null,"code":"// modal.service.ts\nimport { Injector, inject } from \"@angular/core\";\nimport { DialogRef } from \"./dialog-ref\";\nimport * as i0 from \"@angular/core\";\nexport class DialogService {\n  constructor() {\n    this.modalRefs = {};\n    this.injector = inject(Injector);\n    this.viewContainerRef = undefined;\n  }\n  init(vcr) {\n    this.viewContainerRef = vcr;\n  }\n  open(component) {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n    const refIdentifier = crypto.randomUUID();\n    const componentRef = this.viewContainerRef?.createComponent(component, {\n      injector: this.injector\n    });\n    this.modalRefs[refIdentifier] = componentRef;\n    const modalRef = new DialogRef(componentRef.instance, componentRef);\n    modalRef.closed.subscribe(() => {});\n    return modalRef;\n  }\n  removeModal(refIdentifier) {\n    this.modalRefs[refIdentifier].destroy();\n  }\n  static #_ = this.ɵfac = function DialogService_Factory(t) {\n    return new (t || DialogService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DialogService,\n    factory: DialogService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["Injector","inject","DialogRef","DialogService","constructor","modalRefs","injector","viewContainerRef","undefined","init","vcr","open","component","refIdentifier","crypto","randomUUID","componentRef","createComponent","modalRef","instance","closed","subscribe","removeModal","destroy","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/facundo.abdo/Develop/angular-modal-service/src/app/dialog-service/dialog.service.ts"],"sourcesContent":["// modal.service.ts\n\nimport {\n  ApplicationRef,\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  Type,\n  ViewContainerRef,\n  inject,\n} from \"@angular/core\";\n\nimport { DialogRef } from \"./dialog-ref\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DialogService {\n  private modalRefs: { [key: string]: ComponentRef<any> } = {};\n  private injector = inject(Injector);\n  private viewContainerRef: ViewContainerRef | undefined = undefined;\n\n  constructor() {}\n\n  init(vcr: ViewContainerRef) {\n    this.viewContainerRef = vcr;\n  }\n\n  open<T>(component: Type<T>): any {\n    if (!this.viewContainerRef) {\n      throw \"ViewContainerRef is not initialized\";\n    }\n\n    const refIdentifier = crypto.randomUUID();\n\n    const componentRef = this.viewContainerRef?.createComponent(component, {\n      injector: this.injector,\n    });\n\n    this.modalRefs[refIdentifier] = componentRef;\n\n    const modalRef = new DialogRef(componentRef.instance, componentRef);\n\n    modalRef.closed.subscribe(() =>{\n      \n    })\n\n    return modalRef;\n  }\n\n  removeModal(refIdentifier: string) {\n    this.modalRefs[refIdentifier].destroy();\n  }\n}\n"],"mappings":"AAAA;AAEA,SAKEA,QAAQ,EAGRC,MAAM,QACD,eAAe;AAEtB,SAASC,SAAS,QAAQ,cAAc;;AAKxC,OAAM,MAAOC,aAAa;EAKxBC,YAAA;IAJQ,KAAAC,SAAS,GAAyC,EAAE;IACpD,KAAAC,QAAQ,GAAGL,MAAM,CAACD,QAAQ,CAAC;IAC3B,KAAAO,gBAAgB,GAAiCC,SAAS;EAEnD;EAEfC,IAAIA,CAACC,GAAqB;IACxB,IAAI,CAACH,gBAAgB,GAAGG,GAAG;EAC7B;EAEAC,IAAIA,CAAIC,SAAkB;IACxB,IAAI,CAAC,IAAI,CAACL,gBAAgB,EAAE;MAC1B,MAAM,qCAAqC;;IAG7C,MAAMM,aAAa,GAAGC,MAAM,CAACC,UAAU,EAAE;IAEzC,MAAMC,YAAY,GAAG,IAAI,CAACT,gBAAgB,EAAEU,eAAe,CAACL,SAAS,EAAE;MACrEN,QAAQ,EAAE,IAAI,CAACA;KAChB,CAAC;IAEF,IAAI,CAACD,SAAS,CAACQ,aAAa,CAAC,GAAGG,YAAY;IAE5C,MAAME,QAAQ,GAAG,IAAIhB,SAAS,CAACc,YAAY,CAACG,QAAQ,EAAEH,YAAY,CAAC;IAEnEE,QAAQ,CAACE,MAAM,CAACC,SAAS,CAAC,MAAK,CAE/B,CAAC,CAAC;IAEF,OAAOH,QAAQ;EACjB;EAEAI,WAAWA,CAACT,aAAqB;IAC/B,IAAI,CAACR,SAAS,CAACQ,aAAa,CAAC,CAACU,OAAO,EAAE;EACzC;EAAC,QAAAC,CAAA,G;qBAnCUrB,aAAa;EAAA;EAAA,QAAAsB,EAAA,G;WAAbtB,aAAa;IAAAuB,OAAA,EAAbvB,aAAa,CAAAwB,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}